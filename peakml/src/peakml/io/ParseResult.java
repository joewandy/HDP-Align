/* Copyright (C) 2008, Groningen Bioinformatics Centre (http://gbic.biol.rug.nl/)
 * This file is part of PeakML.
 * 
 * PeakML is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 * 
 * PeakML is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with PeakML; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */



package peakml.io;


// java
import java.io.*;

// libraries
import domsax.*;

// peakml
import peakml.*;

import peakml.io.dac.*;
import peakml.io.mzml.*;
import peakml.io.mzxml.*;
import peakml.io.peakml.*;
import peakml.io.xrawfile.*;





/**
 * Central class for collecting the data and meta-data of a file containing mass spectrometry
 * data. This is used as a return type for the parse functions.
 */
public class ParseResult
{
	// constructor(s)
	/**
	 * Standard constructor, which initializes the members to null.
	 */
	public ParseResult()
	{
	}
	
	/**
	 * Constructs a new {@link ParseResult} with the given header and measurement.
	 * 
	 * @param header				The header information from the file.
	 * @param measurement			The data associated to the measurement.
	 */
	public ParseResult(Header header, Measurement measurement)
	{
		this.header = header;
		this.measurement = measurement;
	}
	
	
	// access
	/**
	 * Returns the header instance.
	 * 
	 * @return						The header.
	 */
	public Header getHeader()
	{
		return header;
	}
	
	/**
	 * Returns the measurement instance.
	 * 
	 * @return						The measurement.
	 */
	public Measurement getMeasurement()
	{
		return measurement;
	}
	
	
	// static file access
	/**
	 * Calls the correct parse function based on the filename extension. Each of these functions
	 * returns an instance of {@link ParseResult}, which needs to be examined further to determine
	 * its contents.
	 * 
	 * @param filename				The name of the file to parse.
	 * @return						The contents of the file.
	 * @throws IOException			Thrown on an I/O error.
	 * @throws XmlParserException	Thrown on a XML parse exception.
	 * @throws IXRawfileException	Thrown on an exception generated by the {@link IXRawfile} implementation.
	 */
	public static ParseResult parse(String filename) throws IOException, XmlParserException, IXRawfileException
	{
		File f = new File(filename);
		if (!f.exists())
			throw new IOException("File does not exist '" + filename + "'");
		
		String file = filename.toLowerCase();
		if (file.endsWith("mzxml") || file.endsWith("mzdata"))
			return MzXmlParser.parseCMS(new FileInputStream(filename));
		else if (file.endsWith("mzml"))
			return MZMLParser.parseCMS(new FileInputStream(filename));
		else if (file.endsWith(".peakml"))
			return PeakMLParser.parse(new FileInputStream(filename), true);
		else if (file.endsWith(".raw") && f.isFile())
			return IXRawParser.parse(filename);
		else if (file.endsWith(".raw") && f.isDirectory())
			return DACParser.parse(filename);
		
		throw new IOException("Unsupported file-format for file '" + filename + "'");
	}
	
	
	// data
	/** The header information from the file. */
	public Header header = null;
	/** The data associated to the measurement. */
	public Measurement measurement = null;
}
