import org.gradle.plugins.ide.eclipse.model.SourceFolder

apply plugin: 'java'
apply plugin: 'eclipse'

sourceSets.main.java.srcDir 'src'

repositories {
	flatDir {
		dirs 'lib'
	}
}

eclipse.classpath.file.whenMerged { classpath ->
	classpath.entries.add(new SourceFolder('/peakml', ''))
	classpath.entries.add(new SourceFolder('/domsax', ''))
	classpath.entries.add(new SourceFolder('/cmdline', ''))
}

eclipse {
	project {
		referencedProjects 'cmdline', 'domsax', 'peakml'
	}
}

dependencies {
	//compile files('../peakml/bin', '../domsax/bin', '../cmdline/bin')
	compile project(':cmdline')
	compile project(':domsax')
	compile project(':peakml')

	//compile 'org.apache.commons:commons-math3:3.0'
	//compile 'com.google.guava:guava:12.0'
	//compile 'com.lowagie:iText:2.1.7'
	//compile 'javanumerics:Jama:1.0.2'
	//compile 'jfree:jcommon:1.0.16'
	//compile 'jfree:jfreechart:1.0.13'
	compile files('lib/jni-inchi-0.7-jar-with-dependencies.jar')
	compile files('lib/commons-math3-3.0.jar')
	compile files('lib/guava-12.0.jar')
	compile files('lib/iText-2.1.7.jar')
	compile files('lib/Jama-1.0.2.jar')
	compile files('lib/jcommon-1.0.16.jar')
	compile files('lib/jfreechart-1.0.13.jar')




	compile files('lib/jni-inchi-0.7-jar-with-dependencies.jar')
	compile files('lib/lma_v14.jar')
	//testCompile 'log4j:log4j:1.2.13'
	testCompile files('lib/log4j-1.2.13.jar')
	//compile files('lib/swt_3.5.1-win32.jar')
	compile files('lib/swt-3.7-cocoa-macosx.jar')
	compile files('lib/swt-3.7-cocoa-macosx-x86_64.jar')
	compile files('lib/swt-3.7-gtk-linux-x86_64.jar')
	compile files('lib/swt-3.7-gtk-linux-x86.jar')
	compile files('lib/swt-3.7-win-x86_64.jar')
	compile files('lib/swt-3.7-win-x86.jar')

	//compile 'com.googlecode.matrix-toolkits-java:mtj:0.9.14'
	//compile 'com.googlecode.netlib-java:netlib-java:0.9.3'
	//compile 'arpack:arpack_combo:0.1'
	compile files('lib/mtj-0.9.14.jar')
	compile files('lib/netlib-java-0.9.3.jar')
	compile files('lib/arpack_combo-0.1.jar')

}

task fatjar(type: Jar) {
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	classifier = 'with-dependencies'
}
